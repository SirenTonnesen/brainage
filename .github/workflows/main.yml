require(cvTools)
library(ggplot2)
library(care)
library(xgboost)


xTest<-testset[,8:103, drop = FALSE]
xTest<-as.matrix(xTest)

x<-trainset[,8:103, drop=FALSE]
x<-as.matrix(x)
y<-subset(trainset, select = c("Age"))

predicted<-matrix(0,dim(x)[1],1)

kfoldmat<-matrix(NA,100,dim(x)[1])
kfoldmat<-matrix(NA,100,dim(x)[1])

predicted2<-matrix(0,dim(xTest)[1],1)

kfoldmat2<-matrix(NA,100,dim(xTest)[1])
kfoldmat2<-matrix(NA,100,dim(xTest)[1])

for (i in seq(1:100)) { 
  K = 10
  foldVec<-cvFolds(dim(y)[1],K=K,R=1)
  for (n in seq(1,K)){
    # select 1/10th of data as test set
    test_cv_x<- x[which(foldVec$which==n),]
    # use the rest as training set
    train_cv_x<- x[-which(foldVec$which==n),]
    train_cv_y <- y[-which(foldVec$which==n),]
    # train slm model on 90% of data
    mdl <- xgboost(data = as.matrix(train_cv_x),
                   label = as.matrix(train_cv_y),
                   eta = 0.01, nround = 1400,
                   gamma=1, max_depth=14,
                   objective = "reg:linear", verbose = 2,booster="gbtree")
    #ntreads=1 to reduce runningtime
    # test on remainder
    predicted[which(foldVec$which==n)]<-predict(mdl,as.matrix(test_cv_x))
    #predicted[which(foldVec$which==n)]<-predict(mdl,as.matrix())
    predicted2<-predict(mdl,as.matrix(xTest))
  } 
  kfoldmat[i,]<-predicted
  kfoldmat[i,]<-predicted
  kfoldmat2[i,]<-predicted2
  kfoldmat2[i,]<-predicted2
  
}



kfoldci<-apply(as.matrix(kfoldpred), 1, function(x){mean(x)+c(-1.96,1.96)*sd(x)/sqrt(length(x))})
kfoldci<-t(kfoldci)
colnames(kfoldci)<-c("low", "high") 
kfoldci<-as.data.frame(kfoldci)
meanAge<-rowMeans(kfoldpred)
kfoldci$meanAge<-meanAge
kfoldci$Age<-testset$Age
kfoldci$Dx<-testset$Dx
kfoldci$Sex<-testset$Sex
kfoldci$Sample<-testset$Sample
kfoldci$BAG<-kfoldci$meanAge-kfoldci$Age
kfoldci$var<-(apply(kfoldpred, 1, var))
kfoldci$cv<-(apply(kfoldpred, 1, function(x){sd(x)/mean(x)}))
  
newBAG<-apply(as.matrix(kfoldpred[,2:101]), 2, function(x){x-testset$Age})
newBAG<-as.data.frame(newBAG)

BAGcoef<-matrix(NA,100,dim(newBAG)[1],1)
BAGinter<-matrix(NA,100,dim(newBAG)[1],1)
for (i in seq(1:100)){ 
  mdl<-lm(newBAG[,i] ~ testset$Age + testset$Scanner + testset$Sex + testset$Dx)
  coef<-as.data.frame(mdl$coefficients)
    print(coef[2,1])
    BAGcoef[i,]<-coef[2,1]
    BAGinter[i,]<-coef[1,1]
    
}

BAGcoef<-t(BAGcoef)
BAGinter<-t(BAGinter)
BAGres<-apply(as.matrix(BAGcoef), 2, function(x){(x*testset$Age)})
BAGcoef<-(BAGcoef[1,])

BAGcorr<-matrix(data = NA, nrow = 1823, ncol = 100, byrow = FALSE,
       dimnames = NULL)
for (i in seq(1:100)){ 
BAGcr<-newBAG[,i]-BAGres[,i]-BAGinter[,i]
  print(BAGcr)
  BAGcorr[,i]<-BAGcr
}


meanAge<-rowMeans(BAGcorr)
testdf<-data.frame(meanAge,testset$Age,testset$Sex, testset$Scanner, testset$Dx, testset$Sample)
names(testdf)<-c("BAGcor", "Age", "Sex", "Scanner", "Dx", "Sample")
testdf$BAG<-kfoldci$BAG
testdf$MAEcor<-mean(abs(testdf$BAGcor))
testdf$MAE<-mean(abs(testdf$BAG))
testdf$RSME<-sqrt(abs(testdf$BAG))
testdf$RSMEcor<-sqrt(abs(testdf$BAGcor))
